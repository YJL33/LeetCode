"""
200. Number of Islands
Medium

5315

193

Add to List

Share
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3
"""
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if grid == []: return 0
        # first pass: label
        h, w = len(grid), len(grid[0])
        labels = [[0 for _ in xrange(w)] for _ in xrange(h)]
        links, last = [0], 0
        for i in xrange(h):
            for j in xrange(w):
                # check the neighbors
                if grid[i][j] == '1':
                    neighbors = []
                    if i-1 >= 0 and grid[i-1][j] == '1':
                        neighbors += labels[i-1][j],
                    if j-1 >= 0 and grid[i][j-1] == '1':
                        neighbors += labels[i][j-1],
                    if not neighbors:
                        last += 1
                        labels[i][j] = last
                        links += last,
                    else:
                        l = min(neighbors)
                        labels[i][j] = l
                        for n in neighbors:
                            while n != links[n]:
                                n = links[n]        # Trace to the root
                            if n > l:
                                links[n] = l

        # second pass: count islands
        return sum([i == links[i] for i in xrange(1, len(links))])

# print Solution().numIslands([["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]), "should be 1"
# print Solution().numIslands([["1","1","0","1","0"],["1","1","1","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]), "should be 1"
# print Solution().numIslands([["1","0","1","1","1"],["1","0","1","0","1"],["1","1","1","0","1"]]), "should be 1"
print Solution().numIslands([["1","0","1","1","0","0","1","0","1","1","1","1","0","1","0","1","1","1","1","0"],["0","1","0","0","1","0","1","0","1","1","1","1","1","1","0","1","1","0","1","1"],["1","0","0","1","0","1","0","1","0","1","1","0","1","1","1","0","0","1","1","0"],["0","1","1","0","0","1","1","0","1","1","1","1","0","0","1","0","0","0","1","1"],["1","1","0","1","0","0","1","0","0","0","1","0","1","0","1","1","1","0","1","1"],["0","0","0","0","1","0","1","1","0","0","1","0","0","1","0","1","1","1","1","0"],["1","0","1","1","1","1","0","1","1","0","1","1","0","1","1","1","0","0","1","0"],["0","1","1","0","0","0","1","0","0","1","0","1","1","1","0","0","1","1","0","1"],["0","0","0","0","1","1","0","1","0","0","1","1","0","1","0","0","1","0","1","0"],["0","0","1","1","1","0","1","0","1","0","1","1","1","0","1","1","1","1","1","0"],["1","0","1","0","1","1","1","0","1","1","1","0","1","0","1","0","1","0","1","1"],["0","0","1","1","1","1","0","1","1","1","0","1","0","0","0","1","1","1","0","1"],["1","1","1","0","0","0","0","0","1","1","0","1","1","1","0","1","1","1","1","0"],["0","0","1","1","1","0","0","1","0","0","1","1","1","1","1","1","0","1","1","0"],["0","0","0","1","1","0","0","0","0","1","1","0","1","0","0","1","1","1","1","1"],["0","1","1","1","0","1","0","0","1","1","1","1","1","0","1","1","1","0","0","1"],["0","0","0","0","1","1","1","1","0","0","0","0","1","0","0","0","0","1","1","0"],["1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","1"],["0","1","0","0","1","0","0","1","1","1","1","1","1","0","1","0","1","1","1","1"],["0","0","1","1","1","1","1","0","0","0","1","1","1","1","1","1","0","1","1","0"]]), "should be 23"
