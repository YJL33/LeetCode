from typing import List
import collections
class Solution:
    def probabilityOfHeads(self, prob: List[float], target: int) -> float:
        # target is the desired number of heads
        # use DP
        # list of dict: key = number of heads, val = probability
        dp = []
        initial = {0: 1-prob[0], 1: prob[0]}
        dp.append(initial)
        for i in range(1, len(prob)):
            p = prob[i]
            tmp = collections.defaultdict(int)
            for k, v in dp[-1].items():
                if k <= target: tmp[k] += v*(1-p)
                if k+1 <= target: tmp[k+1] += v*p
            dp.append(tmp)
        
        return dp[-1][target]

print(Solution().probabilityOfHeads([0.4],1))
print(Solution().probabilityOfHeads([0.5,0.5,0.5,0.5,0.5],0))
print(Solution().probabilityOfHeads([0.9135438348889597,0.32438744165539823,0.3868611933705496,0.9871121517253313,0.09876739266164869,0.1443522802956042,0.36162923554484294,0.6625872890913753,0.7826203138601814,0.27460883851315077,0.0032965431253674238,0.20822264152047376,0.19226105170629393,0.5639344311603798,0.2972082333499191,0.5024344238740126,0.1748125690469985,0.9641662772141751,0.32122352918324826,0.43529740104197534,0.5365465795338453,0.022881507698555237,0.4403400288378785,0.7887241769379247,0.6841994114410378,0.5410197916638442,0.8435323044055282,0.5682015425887841,0.9542534697622123,0.7372109882486253,0.5767792642354487,0.5712965511660671,0.8010670548393382,0.10550245120448154,0.9647938104297391,0.8119337146186432,0.001070320111662415,0.31975631674912397,0.33185215202024,0.8648259771487887,0.6592673996678542,0.11958621417008775,0.7295758694130468,0.2537713308195283,0.9417398388593169,0.44601282409929444,0.09970204232987012,0.7117427834472995,0.9281519408437229,0.7410007371056517,0.783763537966945,0.51006738896], 8))